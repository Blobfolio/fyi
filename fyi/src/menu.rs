use clap::{App, AppSettings, SubCommand};



/// CLI Menu.
pub fn menu() -> App<'static, 'static> {
	App::new("FYI")
		.version(env!("CARGO_PKG_VERSION"))
		.author("Blobfolio, LLC. <hello@blobfolio.com>")
		.about(env!("CARGO_PKG_DESCRIPTION"))
		.settings(&[
			AppSettings::SubcommandRequiredElseHelp,
		])
		.global_settings(&[
			AppSettings::VersionlessSubcommands,
		])
		.subcommand(
			SubCommand::with_name("print")
				.about("Print a message with a custom prefix (or no prefix).")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("prefix")
					.short("p")
					.long("prefix")
					.takes_value(true)
					.default_value("")
					.help("Set a custom prefix.")
				)
				.arg(clap::Arg::with_name("prefix_color")
					.short("c")
					.long("prefix-color")
					.takes_value(true)
					.default_value("199")
					.validator(validate_cli_u8)
					.help("Use this color for the prefix.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("debug")
				.about("Print a debug message.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("error")
				.about("Print an error message.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("exit")
					.short("e")
					.long("exit")
					.takes_value(true)
					.default_value("0")
					.help("Exit with this status code after printing.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("info")
				.about("Print an informational message.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("notice")
				.about("Print a notice.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("prompt")
				.about("Ask a Yes/No question. An exit code of 0 indicates acceptance.")
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The question!")
					.multiple(false)
					.required(true)
					.value_name("QUESTION")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("success")
				.about("Print a success message.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
		.subcommand(
			SubCommand::with_name("warning")
				.about("Print a warning message.")
				.arg(clap::Arg::with_name("indent")
					.short("i")
					.long("indent")
					.takes_value(true)
					.default_value("0")
					.help("Number of indentations.")
					.validator(validate_cli_u8)
				)
				.arg(clap::Arg::with_name("no_color")
					.long("no-color")
					.takes_value(false)
					.help("Print without any fancy formatting.")
				)
				.arg(clap::Arg::with_name("time")
					.short("t")
					.long("add-timestamp")
					.alias("time")
					.alias("timestamp")
					.takes_value(false)
					.help("Include a timestamp.")
				)
				.arg(clap::Arg::with_name("msg")
					.help("The message!")
					.multiple(false)
					.required(true)
					.value_name("MSG")
					.use_delimiter(false)
				)
		)
}

/// Validate CLI numeric inputs.
fn validate_cli_u8(val: String) -> Result<(), String> {
	match val.parse::<u8>().is_ok() {
		true => Ok(()),
		false => Err("Value must be at least 0.".to_string()),
	}
}
