/*!
# FYI
*/

#![forbid(unsafe_code)]

#![deny(
	clippy::allow_attributes_without_reason,
	clippy::correctness,
	unreachable_pub,
)]

#![warn(
	clippy::complexity,
	clippy::nursery,
	clippy::pedantic,
	clippy::perf,
	clippy::style,

	clippy::allow_attributes,
	clippy::clone_on_ref_ptr,
	clippy::create_dir,
	clippy::filetype_is_file,
	clippy::format_push_string,
	clippy::get_unwrap,
	clippy::impl_trait_in_params,
	clippy::lossy_float_literal,
	clippy::missing_assert_message,
	clippy::missing_docs_in_private_items,
	clippy::needless_raw_strings,
	clippy::panic_in_result_fn,
	clippy::pub_without_shorthand,
	clippy::rest_pat_in_fully_bound_structs,
	clippy::semicolon_inside_block,
	clippy::str_to_string,
	clippy::string_to_string,
	clippy::todo,
	clippy::undocumented_unsafe_blocks,
	clippy::unneeded_field_pattern,
	clippy::unseparated_literal_suffix,
	clippy::unwrap_in_result,

	macro_use_extern_crate,
	missing_copy_implementations,
	missing_docs,
	non_ascii_idents,
	trivial_casts,
	trivial_numeric_casts,
	unused_crate_dependencies,
	unused_extern_crates,
	unused_import_braces,
)]

#![expect(clippy::redundant_pub_crate, reason = "Unresolvable.")]



mod cli;
mod error;

use error::FyiError;
use fyi_msg::{
	Msg,
	MsgKind,
};
use std::process::ExitCode;



/// # Main.
fn main() -> ExitCode {
	match main__() {
		Ok(()) => ExitCode::SUCCESS,
		Err(FyiError::PrintHelp(x)) => {
			helper(x);
			ExitCode::SUCCESS
		},
		Err(FyiError::PrintVersion) => {
			println!("{}", FyiError::PrintVersion);
			ExitCode::SUCCESS
		},
		Err(FyiError::Passthrough(e)) => e,
		Err(e) => {
			Msg::error(e.to_string()).eprint();
			ExitCode::FAILURE
		},
	}
}

#[inline]
/// # Actual Main.
///
/// This lets us more easily bubble errors, which are printed and handled
/// specially.
fn main__() -> Result<(), FyiError> {
	let kind = cli::parse_kind()?;
	if matches!(kind, MsgKind::Blank) { return cli::parse_blank(); }
	let (msg, flags) = cli::parse_msg(kind)?;

	if matches!(kind, MsgKind::Confirm) {
		return
			if msg.prompt_with_default(flags.yes()) { Ok(()) }
			else { Err(FyiError::Passthrough(ExitCode::FAILURE)) };
	}

	// Print to `STDERR`.
	if flags.stderr() { msg.eprint(); }
	// Print to `STDOUT`.
	else { msg.print(); }

	// Exit as desired.
	flags.exit()
}

// `helper()` is generated by build.rs.
include!(concat!(env!("OUT_DIR"), "/help.rs"));
