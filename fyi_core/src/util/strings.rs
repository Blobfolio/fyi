/*!
# FYI Core: Strings
*/

use std::{
	borrow::Cow,
	ffi::{
		OsStr,
		OsString,
	},
};



#[must_use]
#[allow(clippy::too_many_lines)]
/// ANSI Bold
pub fn ansi_bold(num: u8) -> &'static str {
	match num {
		0 => "",
		1 => "\x1B[1;38;5;1m",
		2 => "\x1B[1;38;5;2m",
		3 => "\x1B[1;38;5;3m",
		4 => "\x1B[1;38;5;4m",
		5 => "\x1B[1;38;5;5m",
		6 => "\x1B[1;38;5;6m",
		7 => "\x1B[1;38;5;7m",
		8 => "\x1B[1;38;5;8m",
		9 => "\x1B[1;38;5;9m",
		10 => "\x1B[1;38;5;10m",
		11 => "\x1B[1;38;5;11m",
		12 => "\x1B[1;38;5;12m",
		13 => "\x1B[1;38;5;13m",
		14 => "\x1B[1;38;5;14m",
		15 => "\x1B[1;38;5;15m",
		16 => "\x1B[1;38;5;16m",
		17 => "\x1B[1;38;5;17m",
		18 => "\x1B[1;38;5;18m",
		19 => "\x1B[1;38;5;19m",
		20 => "\x1B[1;38;5;20m",
		21 => "\x1B[1;38;5;21m",
		22 => "\x1B[1;38;5;22m",
		23 => "\x1B[1;38;5;23m",
		24 => "\x1B[1;38;5;24m",
		25 => "\x1B[1;38;5;25m",
		26 => "\x1B[1;38;5;26m",
		27 => "\x1B[1;38;5;27m",
		28 => "\x1B[1;38;5;28m",
		29 => "\x1B[1;38;5;29m",
		30 => "\x1B[1;38;5;30m",
		31 => "\x1B[1;38;5;31m",
		32 => "\x1B[1;38;5;32m",
		33 => "\x1B[1;38;5;33m",
		34 => "\x1B[1;38;5;34m",
		35 => "\x1B[1;38;5;35m",
		36 => "\x1B[1;38;5;36m",
		37 => "\x1B[1;38;5;37m",
		38 => "\x1B[1;38;5;38m",
		39 => "\x1B[1;38;5;39m",
		40 => "\x1B[1;38;5;40m",
		41 => "\x1B[1;38;5;41m",
		42 => "\x1B[1;38;5;42m",
		43 => "\x1B[1;38;5;43m",
		44 => "\x1B[1;38;5;44m",
		45 => "\x1B[1;38;5;45m",
		46 => "\x1B[1;38;5;46m",
		47 => "\x1B[1;38;5;47m",
		48 => "\x1B[1;38;5;48m",
		49 => "\x1B[1;38;5;49m",
		50 => "\x1B[1;38;5;50m",
		51 => "\x1B[1;38;5;51m",
		52 => "\x1B[1;38;5;52m",
		53 => "\x1B[1;38;5;53m",
		54 => "\x1B[1;38;5;54m",
		55 => "\x1B[1;38;5;55m",
		56 => "\x1B[1;38;5;56m",
		57 => "\x1B[1;38;5;57m",
		58 => "\x1B[1;38;5;58m",
		59 => "\x1B[1;38;5;59m",
		60 => "\x1B[1;38;5;60m",
		61 => "\x1B[1;38;5;61m",
		62 => "\x1B[1;38;5;62m",
		63 => "\x1B[1;38;5;63m",
		64 => "\x1B[1;38;5;64m",
		65 => "\x1B[1;38;5;65m",
		66 => "\x1B[1;38;5;66m",
		67 => "\x1B[1;38;5;67m",
		68 => "\x1B[1;38;5;68m",
		69 => "\x1B[1;38;5;69m",
		70 => "\x1B[1;38;5;70m",
		71 => "\x1B[1;38;5;71m",
		72 => "\x1B[1;38;5;72m",
		73 => "\x1B[1;38;5;73m",
		74 => "\x1B[1;38;5;74m",
		75 => "\x1B[1;38;5;75m",
		76 => "\x1B[1;38;5;76m",
		77 => "\x1B[1;38;5;77m",
		78 => "\x1B[1;38;5;78m",
		79 => "\x1B[1;38;5;79m",
		80 => "\x1B[1;38;5;80m",
		81 => "\x1B[1;38;5;81m",
		82 => "\x1B[1;38;5;82m",
		83 => "\x1B[1;38;5;83m",
		84 => "\x1B[1;38;5;84m",
		85 => "\x1B[1;38;5;85m",
		86 => "\x1B[1;38;5;86m",
		87 => "\x1B[1;38;5;87m",
		88 => "\x1B[1;38;5;88m",
		89 => "\x1B[1;38;5;89m",
		90 => "\x1B[1;38;5;90m",
		91 => "\x1B[1;38;5;91m",
		92 => "\x1B[1;38;5;92m",
		93 => "\x1B[1;38;5;93m",
		94 => "\x1B[1;38;5;94m",
		95 => "\x1B[1;38;5;95m",
		96 => "\x1B[1;38;5;96m",
		97 => "\x1B[1;38;5;97m",
		98 => "\x1B[1;38;5;98m",
		99 => "\x1B[1;38;5;99m",
		100 => "\x1B[1;38;5;100m",
		101 => "\x1B[1;38;5;101m",
		102 => "\x1B[1;38;5;102m",
		103 => "\x1B[1;38;5;103m",
		104 => "\x1B[1;38;5;104m",
		105 => "\x1B[1;38;5;105m",
		106 => "\x1B[1;38;5;106m",
		107 => "\x1B[1;38;5;107m",
		108 => "\x1B[1;38;5;108m",
		109 => "\x1B[1;38;5;109m",
		110 => "\x1B[1;38;5;110m",
		111 => "\x1B[1;38;5;111m",
		112 => "\x1B[1;38;5;112m",
		113 => "\x1B[1;38;5;113m",
		114 => "\x1B[1;38;5;114m",
		115 => "\x1B[1;38;5;115m",
		116 => "\x1B[1;38;5;116m",
		117 => "\x1B[1;38;5;117m",
		118 => "\x1B[1;38;5;118m",
		119 => "\x1B[1;38;5;119m",
		120 => "\x1B[1;38;5;120m",
		121 => "\x1B[1;38;5;121m",
		122 => "\x1B[1;38;5;122m",
		123 => "\x1B[1;38;5;123m",
		124 => "\x1B[1;38;5;124m",
		125 => "\x1B[1;38;5;125m",
		126 => "\x1B[1;38;5;126m",
		127 => "\x1B[1;38;5;127m",
		128 => "\x1B[1;38;5;128m",
		129 => "\x1B[1;38;5;129m",
		130 => "\x1B[1;38;5;130m",
		131 => "\x1B[1;38;5;131m",
		132 => "\x1B[1;38;5;132m",
		133 => "\x1B[1;38;5;133m",
		134 => "\x1B[1;38;5;134m",
		135 => "\x1B[1;38;5;135m",
		136 => "\x1B[1;38;5;136m",
		137 => "\x1B[1;38;5;137m",
		138 => "\x1B[1;38;5;138m",
		139 => "\x1B[1;38;5;139m",
		140 => "\x1B[1;38;5;140m",
		141 => "\x1B[1;38;5;141m",
		142 => "\x1B[1;38;5;142m",
		143 => "\x1B[1;38;5;143m",
		144 => "\x1B[1;38;5;144m",
		145 => "\x1B[1;38;5;145m",
		146 => "\x1B[1;38;5;146m",
		147 => "\x1B[1;38;5;147m",
		148 => "\x1B[1;38;5;148m",
		149 => "\x1B[1;38;5;149m",
		150 => "\x1B[1;38;5;150m",
		151 => "\x1B[1;38;5;151m",
		152 => "\x1B[1;38;5;152m",
		153 => "\x1B[1;38;5;153m",
		154 => "\x1B[1;38;5;154m",
		155 => "\x1B[1;38;5;155m",
		156 => "\x1B[1;38;5;156m",
		157 => "\x1B[1;38;5;157m",
		158 => "\x1B[1;38;5;158m",
		159 => "\x1B[1;38;5;159m",
		160 => "\x1B[1;38;5;160m",
		161 => "\x1B[1;38;5;161m",
		162 => "\x1B[1;38;5;162m",
		163 => "\x1B[1;38;5;163m",
		164 => "\x1B[1;38;5;164m",
		165 => "\x1B[1;38;5;165m",
		166 => "\x1B[1;38;5;166m",
		167 => "\x1B[1;38;5;167m",
		168 => "\x1B[1;38;5;168m",
		169 => "\x1B[1;38;5;169m",
		170 => "\x1B[1;38;5;170m",
		171 => "\x1B[1;38;5;171m",
		172 => "\x1B[1;38;5;172m",
		173 => "\x1B[1;38;5;173m",
		174 => "\x1B[1;38;5;174m",
		175 => "\x1B[1;38;5;175m",
		176 => "\x1B[1;38;5;176m",
		177 => "\x1B[1;38;5;177m",
		178 => "\x1B[1;38;5;178m",
		179 => "\x1B[1;38;5;179m",
		180 => "\x1B[1;38;5;180m",
		181 => "\x1B[1;38;5;181m",
		182 => "\x1B[1;38;5;182m",
		183 => "\x1B[1;38;5;183m",
		184 => "\x1B[1;38;5;184m",
		185 => "\x1B[1;38;5;185m",
		186 => "\x1B[1;38;5;186m",
		187 => "\x1B[1;38;5;187m",
		188 => "\x1B[1;38;5;188m",
		189 => "\x1B[1;38;5;189m",
		190 => "\x1B[1;38;5;190m",
		191 => "\x1B[1;38;5;191m",
		192 => "\x1B[1;38;5;192m",
		193 => "\x1B[1;38;5;193m",
		194 => "\x1B[1;38;5;194m",
		195 => "\x1B[1;38;5;195m",
		196 => "\x1B[1;38;5;196m",
		197 => "\x1B[1;38;5;197m",
		198 => "\x1B[1;38;5;198m",
		199 => "\x1B[1;38;5;199m",
		200 => "\x1B[1;38;5;200m",
		201 => "\x1B[1;38;5;201m",
		202 => "\x1B[1;38;5;202m",
		203 => "\x1B[1;38;5;203m",
		204 => "\x1B[1;38;5;204m",
		205 => "\x1B[1;38;5;205m",
		206 => "\x1B[1;38;5;206m",
		207 => "\x1B[1;38;5;207m",
		208 => "\x1B[1;38;5;208m",
		209 => "\x1B[1;38;5;209m",
		210 => "\x1B[1;38;5;210m",
		211 => "\x1B[1;38;5;211m",
		212 => "\x1B[1;38;5;212m",
		213 => "\x1B[1;38;5;213m",
		214 => "\x1B[1;38;5;214m",
		215 => "\x1B[1;38;5;215m",
		216 => "\x1B[1;38;5;216m",
		217 => "\x1B[1;38;5;217m",
		218 => "\x1B[1;38;5;218m",
		219 => "\x1B[1;38;5;219m",
		220 => "\x1B[1;38;5;220m",
		221 => "\x1B[1;38;5;221m",
		222 => "\x1B[1;38;5;222m",
		223 => "\x1B[1;38;5;223m",
		224 => "\x1B[1;38;5;224m",
		225 => "\x1B[1;38;5;225m",
		226 => "\x1B[1;38;5;226m",
		227 => "\x1B[1;38;5;227m",
		228 => "\x1B[1;38;5;228m",
		229 => "\x1B[1;38;5;229m",
		230 => "\x1B[1;38;5;230m",
		231 => "\x1B[1;38;5;231m",
		232 => "\x1B[1;38;5;232m",
		233 => "\x1B[1;38;5;233m",
		234 => "\x1B[1;38;5;234m",
		235 => "\x1B[1;38;5;235m",
		236 => "\x1B[1;38;5;236m",
		237 => "\x1B[1;38;5;237m",
		238 => "\x1B[1;38;5;238m",
		239 => "\x1B[1;38;5;239m",
		240 => "\x1B[1;38;5;240m",
		241 => "\x1B[1;38;5;241m",
		242 => "\x1B[1;38;5;242m",
		243 => "\x1B[1;38;5;243m",
		244 => "\x1B[1;38;5;244m",
		245 => "\x1B[1;38;5;245m",
		246 => "\x1B[1;38;5;246m",
		247 => "\x1B[1;38;5;247m",
		248 => "\x1B[1;38;5;248m",
		249 => "\x1B[1;38;5;249m",
		250 => "\x1B[1;38;5;250m",
		251 => "\x1B[1;38;5;251m",
		252 => "\x1B[1;38;5;252m",
		253 => "\x1B[1;38;5;253m",
		254 => "\x1B[1;38;5;254m",
		255 => "\x1B[1;38;5;255m",
	}
}

#[inline]
/// From `OsStr(ing)`.
pub fn from_os_string<S> (text: S) -> String
where S: Into<OsString> {
	text.into().to_str().unwrap_or("").to_string()
}

#[inline]
/// To `OsString`.
pub fn to_os_string<S> (text: S) -> OsString
where S: AsRef<str> {
	OsStr::new(text.as_ref()).to_os_string()
}

#[must_use]
/// Make whitespace.
///
/// Generate a string consisting of X spaces.
pub fn whitespace(count: usize) -> Cow<'static, str> {
	unsafe { String::from_utf8_unchecked(whitespace_bytes(count).to_vec()).into() }
}

#[must_use]
/// Make whitespace.
///
/// Generate a string consisting of X spaces.
pub fn whitespace_bytes(count: usize) -> Cow<'static, [u8]> {
	lazy_static::lazy_static! {
		// Precompute 100 spaces; it is cheaper to shrink than to grow.
		static ref WHITE: Cow<'static, [u8]> = Cow::Owned(vec![b' '; 100]);
	}

	if 0 == count {
		vec![].into()
	}
	else if count <= 100 {
		WHITE[0..count].into()
	}
	else {
		vec![b' '; count].into()
	}
}



#[cfg(test)]
mod tests {
	use super::*;

	#[test]
	fn os_string() {
		let test_str: &OsStr = OsStr::new("Hello World!");
		let test_string: OsString = test_str.to_os_string();

		assert_eq!(super::from_os_string(&test_str), "Hello World!".to_string());
		assert_eq!(super::to_os_string("Hello World!"), test_string);
	}

	#[test]
	fn whitespace() {
		for i in (1..111).into_iter() {
			let tmp: Cow<str> = super::whitespace(i);
			assert_eq!(tmp.len(), i);
			assert!(tmp.trim().is_empty());
		}
	}
}
