/*!
# FYI Msg

This crate contains the objects providing the heart of the FYI command line
application, namely [Msg], a simple struct for status-like messages that can be
easily printed to `Stdout` or `Stderr`.



## Stability: Alpha

This project is under heavy development and subject to change. While the code
in the `master` branch should always be in a "working" state, breaking changes
and major refactors may be introduced between releases.

(This should probably *not* be used in production-ready applications.)
*/

#![warn(clippy::filetype_is_file)]
#![warn(clippy::integer_division)]
#![warn(clippy::needless_borrow)]
#![warn(clippy::nursery)]
#![warn(clippy::pedantic)]
#![warn(clippy::perf)]
#![warn(clippy::suboptimal_flops)]
#![warn(clippy::unneeded_field_pattern)]
#![warn(macro_use_extern_crate)]
#![warn(missing_copy_implementations)]
#![warn(missing_debug_implementations)]
#![warn(missing_docs)]
#![warn(non_ascii_idents)]
#![warn(trivial_casts)]
#![warn(trivial_numeric_casts)]
#![warn(unreachable_pub)]
#![warn(unused_crate_dependencies)]
#![warn(unused_extern_crates)]
#![warn(unused_import_braces)]

#![allow(clippy::cast_possible_truncation)]
#![allow(clippy::cast_precision_loss)]
#![allow(clippy::cast_sign_loss)]
#![allow(clippy::missing_errors_doc)]
#![allow(clippy::module_name_repetitions)]



mod msg;
mod nice_int;
pub mod traits;
pub mod utility;

pub use msg::{
	Msg,
	MsgBuffer2,
	MsgBuffer3,
	MsgBuffer4,
	MsgBuffer5,
	MsgBuffer6,
	MsgBuffer7,
	MsgBuffer8,
	MsgBuffer9,
	MsgBuffer10,
	MsgKind,
	MsgPrefix,
	FLAG_INDENT,
	FLAG_TIMESTAMP,
};
pub use nice_int::NiceInt;

/// # Single Digit Numbers.
///
/// Numbers `0..=9` represented in ASCII u8 format.
pub(crate) const NUMD:   [u8; 10] = *b"0123456789";

/// # Double Digit Numbers.
///
/// All numbers `0..=99` represented in ASCII u8 format. Single-digit values
/// are zero-padded on the left.
pub(crate) const NUMDD:  [u8; 200] = *b"\
	00010203040506070809101112131415161718192021222324\
	25262728293031323334353637383940414243444546474849\
	50515253545556575859606162636465666768697071727374\
	75767778798081828384858687888990919293949596979899";

/// # Triple Digit Numbers.
///
/// All numbers `100..=999` represented in ASCII u8 format.
pub(crate) const NUMDDD: [u8; 2700] = *b"\
	100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199\
	200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299\
	300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399\
	400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499\
	500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599\
	600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699\
	700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799\
	800801802803804805806807808809810811812813814815816817818819820821822823824825826827828829830831832833834835836837838839840841842843844845846847848849850851852853854855856857858859860861862863864865866867868869870871872873874875876877878879880881882883884885886887888889890891892893894895896897898899\
	900901902903904905906907908909910911912913914915916917918919920921922923924925926927928929930931932933934935936937938939940941942943944945946947948949950951952953954955956957958959960961962963964965966967968969970971972973974975976977978979980981982983984985986987988989990991992993994995996997998999";

/// # 48.
///
/// This is a simple mask that can be applied against a decimal between `0..10`
/// to turn it into the equivalent ASCII. This is the same thing as adding `48`
/// (for this particular range) but is minutely faster because it's bitwise!
///
/// ```no_run
/// let x: u8 = 5;
/// assert_eq!(x | MASK_U8, x + 48);
/// ```
pub(crate) const MASK_U8: u8 = 0b11_0000;
